<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>RGC MFA Board</title>
<meta name="description" content="A simple logic circuit editor and simulator." />
  <!-- Copyright 1998-2017 by Northwoods Software Corporation. -->
  <meta charset="UTF-8">
  <script src="./release/go.js"></script>
    <script src="./extensions/TextEditorSelectBox.js"></script>
<script src="./extensions/TextEditorRadioButtons.js"></script>
  <link rel='stylesheet' href='./extensions/LightBoxContextMenu.css' />

 <!--   <script src=".../assets/js/goSamplesRGC.js"></script>  <!-- this is only for the GoJS Samples framework -->D McLaren
  <script src="./extensions/LightBoxContextMenu.js"></script> 
<script id="code">
  
    var red = "forestgreen";  // 0 or false
    var green = "red";  // 1 or true
	var MotorOn = "./assets/M.png";
		var MotorOff = "./assets/M.png";
		    var blue = "blue";
					    var white = "white";
						var lampoff = "brown";
						var yellow = "yellow";
		
    function init() {
      if (window.goSamples) goSamples();  // init for these samples -- you don't need to call this
      var $ = go.GraphObject.make;  // for conciseness in defining templates
      myDiagram =
        $(go.Diagram, "myDiagramDiv",  // create a new Diagram in the HTML DIV element "myDiagramDiv"
          {	
initialScale: 1.5,
            initialContentAlignment: go.Spot.Left,
            
            allowDrop: true,  // Nodes from the Palette can be dropped into the Diagram
            "draggingTool.isGridSnapEnabled": true,  // dragged nodes will snap to a grid of 10x10 cells
            "undoManager.isEnabled": true
          });
      // when the document is modified, add a "*" to the title and enable the "Save" button
      myDiagram.addDiagramListener("Modified", function(e) {
        var button = document.getElementById("saveModel");
        if (button) button.disabled = !myDiagram.isModified;
        var idx = document.title.indexOf("*");
        if (myDiagram.isModified) {
          if (idx < 0) document.title += "*";
        } else {
          if (idx >= 0) document.title = document.title.substr(0, idx);
        }
      });
      var palette = new go.Palette("palette");  // create a new Palette in the HTML DIV element "palette"
      // creates relinkable Links that will avoid crossing Nodes when possible and will jump over other Links in their paths
 myDiagram.linkTemplate =
      $(go.Link,  // the whole link panel
        { relinkableFrom: true, relinkableTo: true, reshapable: true, resegmentable: true },
        {
          routing: go.Link.AvoidsNodes,  // but this is changed to go.Link.Orthgonal when the Link is reshaped
          adjusting: go.Link.End,
          curve: go.Link.JumpOver,
          corner: 5

        },


          new go.Binding("isShadowed", "isSelected").ofObject(),{ contextMenu: window.myHTMLLightBox },
          $(go.Shape,
            { name: "SHAPE", strokeWidth: 4, stroke: red }));
      // node template helpers
      var sharedToolTip =
        $(go.Adornment, "Auto",
          $(go.Shape, "RoundedRectangle", { fill: "lightyellow" }),
          $(go.TextBlock, { margin: 2 },
            new go.Binding("text",  "" , function(d) { return d.category; })));
      // define some common property settings
      function nodeStyle() {
        return [new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
                new go.Binding("isShadowed", "isSelected").ofObject(),
                {
                  selectionAdorned: false,
                  shadowOffset: new go.Point(0, 0),
                  shadowBlur: 15,
                  shadowColor: "blue",
                  toolTip: sharedToolTip
                }];
      }
      function shapeStyle() {
        return {
          name: "NODESHAPE",
          fill: "lightgray",
          stroke: "darkslategray",
          desiredSize: new go.Size(70, 70),
          strokeWidth: 2
        };
      }
	        function shapeStyle1() {
        return {
          name: "NODESHAPE",
          fill: "lightgray",
          stroke: "darkslategray",
          desiredSize: new go.Size(0, 0),
          strokeWidth: 2
        };
      }
	  	        function shapeStyle2() {
        return {
          name: "NODESHAPE",
          fill: "white",
          stroke: "white",
          desiredSize: new go.Size(20, 20),
          strokeWidth: 2
        };
      }
      function portStyle(input) {
        return {
          desiredSize: new go.Size(15, 2),
          fill: "black",
          fromSpot: go.Spot.Center,
          fromLinkable: !input,
          toSpot: go.Spot.Left,
          toLinkable: input,
          toMaxLinks: 1,
          cursor: "pointer",
        };
      }
	        function portStyleB(input) {
        return {
          desiredSize: new go.Size(35, 35),
          fill: "transparent",
		  stroke: "transparent",
          fromSpot: go.Spot.Center,
          fromLinkable: !input,
          toSpot: go.Spot.Left,
          toLinkable: input,
          toMaxLinks: 1,
          cursor: "pointer",
        };
      }
	  	        function portStyleC(input) {
        return {
          desiredSize: new go.Size(35, 35),
          fill: "transparent",
		  stroke: "transparent",
          fromSpot: go.Spot.Left,
          fromLinkable: !input,
          toSpot: go.Spot.Center,
          toLinkable: input,
          toMaxLinks: 1,
          cursor: "pointer",
        };
      }
	  	  	        function portStyleD(input) {
        return {
          desiredSize: new go.Size(35, 35),
          fill: "transparent",
		  stroke: "transparent",
          fromSpot: go.Spot.Right,
          fromLinkable: !input,
          toSpot: go.Spot.Right,
          toLinkable: input,
          toMaxLinks: 1,
          cursor: "pointer",
        };
      }
	  
      function portStyle1(input) {
        return {
          desiredSize: new go.Size(10, 20),
          fill: "black",
          fromSpot: go.Spot.Right,
          fromLinkable: !input,
          toSpot: go.Spot.Left,
          toLinkable: input,
          toMaxLinks: 1,
          cursor: "pointer"
        };
		      }
	  
      function portStyle2(input) {
        return {
          desiredSize: new go.Size(10, 20),
          fill: "transparent", stroke: "transparent",
          fromSpot: go.Spot.Top,
          fromLinkable: !input,
          toSpot: go.Spot.Right,
          toLinkable: input,
          toMaxLinks: 1,
          cursor: "pointer"
        };
		
      }
      // define templates for each type of node
 		var BlankTemplate =  // the default category
      $(go.Node, "Spot", nodeStyle(),
        // the main object is a Panel that surrounds a TextBlock with a rectangular Shape
     $(go.Shape, "Rectangle", shapeStyle2(),{ fill: "white" }),  // override the default fill (from shapeStyle()) to be red
						$(go.Picture, "",
              { width: 100, height: 50 })
          
        );
                       myDiagram.toolManager.linkReshapingTool.handleArchetype =
    $(go.Shape, "Circle",
      { width: 15, height: 15, fill: "yellow" });
        myDiagram.toolManager.linkReshapingTool.midHandleArchetype =
    $(go.Shape, "Diamond", { width: 15, height: 15, fill: "cyan" }); 
		  
		      
		var SwitchTemplate =
        $(go.Node, "Spot", nodeStyle(),{ contextMenu: window.myHTMLLightBox },
          $(go.Shape, "Circle", shapeStyle(),
            { fill: red }),  // override the default fill (from shapeStyle()) to be red
						$(go.Picture, "./assets/push switch.png",
              { width: 40, height: 40 }),
          $(go.Shape, "Rectangle", portStyleB(false),  // the only port
            { portId: "", alignment: new go.Spot(1.1, 0.5) }),
						$(go.Shape, "Rectangle",
        { alignment: new go.Spot(1.1, 0.5),
          fill: "black", width: 15, height: 2,
          visible: true },
        new go.Binding("visible", "error")),
          { // if double-clicked, an input node will change its value, represented by the color.
            doubleClick: function (e, obj) {
                e.diagram.startTransaction("Toggle Input");
                var shp = obj.findObject("NODESHAPE");
                shp.fill = (shp.fill === green) ? red : green;
                updateStates();
                e.diagram.commitTransaction("Toggle Input");
              }
        }      
        );


		var SSwitchTemplate =
        $(go.Node, "Spot", nodeStyle(),{ contextMenu: window.myHTMLLightBox },
          $(go.Shape, "Circle", shapeStyle(),
            { fill: red }),  // override the default fill (from shapeStyle()) to be red
						$(go.Picture, "./assets/slide switch.png",
              { width: 40, height: 40 }),
          $(go.Shape, "Rectangle", portStyleB(false),  // the only port
            { portId: "", alignment: new go.Spot(1.1, 0.5) }),
			$(go.Shape, "Rectangle",
        { alignment: new go.Spot(1.1, 0.5),
          fill: "black", width: 15, height: 2,
          visible: true },
        new go.Binding("visible", "error")),
          { // if double-clicked, an input node will change its value, represented by the color.
            doubleClick: function (e, obj) {
                e.diagram.startTransaction("Toggle Input");
                var shp = obj.findObject("NODESHAPE");
                shp.fill = (shp.fill === green) ? red : green;
                updateStates();
                e.diagram.commitTransaction("Toggle Input");
              }
        }      
        );
		
	  myDiagram.contextMenu = window.myHTMLLightBox;	
		
      var LampTemplate =
		$(go.Node, "Spot", nodeStyle(),{ contextMenu: window.myHTMLLightBox },
          $(go.Shape, "Rectangle", shapeStyle(),
            { fill: yellow }),  // override the default fill (from shapeStyle()) to be green
						$(go.Picture, "./assets/lightoutput.png",
              { width: 50, height: 50 }),
          $(go.Shape, "Rectangle", portStyleB(true),  // the only port
            { portId: "", alignment: new go.Spot(0.05, 0.5) }),
						$(go.Shape, "Rectangle",
        { alignment: new go.Spot(-0.1, 0.5),
          fill: "black", width: 15, height: 2,
          visible: true },
        new go.Binding("visible", "error"))
        );
      var buzzerTemplate =
		$(go.Node, "Spot", nodeStyle(),{ contextMenu: window.myHTMLLightBox },
          $(go.Shape, "Rectangle", shapeStyle(),
            { fill: red }),  // override the default fill (from shapeStyle()) to be green
						$(go.Picture, "./assets/buzzer.png",
              { width: 50, height: 50 }),
          $(go.Shape, "Rectangle", portStyleB(true),  // the only port
            { portId: "", alignment: new go.Spot(0.05, 0.5) }),
						$(go.Shape, "Rectangle",
        { alignment: new go.Spot(-0.10, 0.5),
          fill: "black", width: 15, height: 2,
          visible: true },
        new go.Binding("visible", "error"))
        );
      var relayTemplate =
        $(go.Node, "Spot", nodeStyle(),{ contextMenu: window.myHTMLLightBox },
          $(go.Shape, "Rectangle", shapeStyle(),
            { fill: "red" }),  // override the default fill (from shapeStyle()) to be green
						$(go.Picture, "./assets/relay.png",
              { width: 50, height: 50 }),
		  $(go.Shape, "Rectangle", portStyleB(true),  // the only port
            { portId: "in1", alignment: new go.Spot(0.05, 0.5) }),
			$(go.Shape, "Rectangle",
        { alignment: new go.Spot(-0.1, 0.5),
          fill: "black", width: 15, height: 2,
          visible: true },
        new go.Binding("visible", "error")),
		$(go.Shape, "Rectangle", portStyleD(true),
            { portId: "in2", alignment: new go.Spot(0.95, 0.3) }),
			$(go.Shape, "Rectangle",
        { alignment: new go.Spot(1.1, 0.3),
          fill: "black", width: 15, height: 2,
          visible: true },
        new go.Binding("visible", "error")),
          $(go.Shape, "Rectangle", portStyleB(false),
            { portId: "out2", alignment: new go.Spot(1.2, 0.7),
			 }),$(go.Shape, "Rectangle",
        { alignment: new go.Spot(1.1, 0.7),
          fill: "black", width: 15, height: 2,
          visible: true },
        new go.Binding("visible", "error"))
        );
		
      var AndTemplate =
        $(go.Node, "Spot", nodeStyle(),{ contextMenu: window.myHTMLLightBox },
          $(go.Shape, "AndGate", shapeStyle()),
          $(go.Shape, "Rectangle", portStyleB(true),
            { portId: "in1", alignment: new go.Spot(0.04, 0.3) }),
						$(go.Shape, "Rectangle",
        { alignment: new go.Spot(-0.1, 0.3),
          fill: "black", width: 15, height: 2,
          visible: true },
        new go.Binding("visible", "error")),
          $(go.Shape, "Rectangle", portStyleB(true),
            { portId: "in2", alignment: new go.Spot(0.04, 0.7) }),
			$(go.Shape, "Rectangle",
        { alignment: new go.Spot(-0.1, 0.7),
          fill: "black", width: 15, height: 2,
          visible: true },
        new go.Binding("visible", "error")),
          $(go.Shape, "Rectangle", portStyleB(false),
            { portId: "out", alignment: new go.Spot(1.2, 0.5) }),
			$(go.Shape, "Rectangle",
        { alignment: new go.Spot(1.10, 0.5),
          fill: "black", width: 15, height: 2,
          visible: true },
        new go.Binding("visible", "error"))
        );
      var orTemplate =
        $(go.Node, "Spot", nodeStyle(),{ contextMenu: window.myHTMLLightBox },
          $(go.Shape, "OrGate", shapeStyle()),
          $(go.Shape, "Rectangle", portStyleB(true),
            { portId: "in1", cursor: "pointer",  // show a different cursor to indicate potential link point
                  fromLinkable: false, toLinkable: true,
                  fromLinkableDuplicates: true, toLinkableDuplicates: false,
                  fromLinkableSelfNode: true, toLinkableSelfNode: true,alignment: new go.Spot(0.19, 0.3)
				   }),
				   $(go.Shape, "Rectangle",
        { alignment: new go.Spot(0.05, 0.3),
          fill: "black", width: 15, height: 2,
          visible: true },
        new go.Binding("visible", "error")),
          $(go.Shape, "Rectangle", portStyleB(true),
            { portId: "in2", cursor: "pointer",  // show a different cursor to indicate potential link point
                  fromLinkable: false, toLinkable: true,
                  fromLinkableDuplicates: true, toLinkableDuplicates: false,
                  fromLinkableSelfNode: true, toLinkableSelfNode: true,alignment: new go.Spot(0.19, 0.7) }),
				  $(go.Shape, "Rectangle",
        { alignment: new go.Spot(0.05, 0.7),
          fill: "black", width: 15, height: 2,
          visible: true },
        new go.Binding("visible", "error")),
          $(go.Shape, "Rectangle", portStyleB(false),
            { portId: "out", 
                  fromLinkable: true, toLinkable: false,
                  fromLinkableDuplicates: true, toLinkableDuplicates: true,
                  fromLinkableSelfNode: true, toLinkableSelfNode: true,alignment: new go.Spot(1.2, 0.5),
				   }),            { portId: "out", alignment: new go.Spot(1.2, 0.5) },$(go.Shape, "Rectangle",
        { alignment: new go.Spot(1.1, 0.5),
          fill: "black", width: 15, height: 2,
          visible: true },
        new go.Binding("visible", "error"))
        );
      var xnorTemplate =
        $(go.Node, "Spot", nodeStyle(),{ contextMenu: window.myHTMLLightBox },
          $(go.Shape, "XnorGate", shapeStyle()),
          $(go.Shape, "Rectangle", portStyle(true),
            { portId: "in1", alignment: new go.Spot(0.17, 0.3) }),
          $(go.Shape, "Rectangle", portStyle(true),
            { portId: "in2", alignment: new go.Spot(0.17, 0.7) }),
          $(go.Shape, "Rectangle", portStyleB(false),
            { portId: "out", alignment: new go.Spot(1.15, 0.5) }),
			$(go.Shape, "Rectangle",
        { alignment: new go.Spot(1.1, 0.5),
          fill: "black", width: 15, height: 2,
          visible: true },
        new go.Binding("visible", "error"))
        );
            var norTemplate =
        $(go.Node, "Spot", nodeStyle(),{ contextMenu: window.myHTMLLightBox },
          $(go.Shape, "NorGate", shapeStyle()),
          $(go.Shape, "Rectangle", portStyle(true),
            { portId: "in1", alignment: new go.Spot(0.05, 0.3) }),
          $(go.Shape, "Rectangle", portStyle(true),
            { portId: "in2", alignment: new go.Spot(0.05, 0.7) }),
          $(go.Shape, "Rectangle", portStyleB(false),
            { portId: "out", alignment: new go.Spot(1.2, 0.5) }),
			$(go.Shape, "Rectangle",
        { alignment: new go.Spot(1.1, 0.5),
          fill: "black", width: 15, height: 2,
          visible: true },
        new go.Binding("visible", "error"))
        );
      var xorTemplate =
        $(go.Node, "Spot", nodeStyle(),{ contextMenu: window.myHTMLLightBox },
          $(go.Shape, "XorGate", shapeStyle()),
          $(go.Shape, "Rectangle", portStyle(true),
            { portId: "in1", alignment: new go.Spot(0.17, 0.3) }),
          $(go.Shape, "Rectangle", portStyle(true),
            { portId: "in2", alignment: new go.Spot(0.17, 0.7) }),
          $(go.Shape, "Rectangle", portStyleB(false),
            { portId: "out", alignment: new go.Spot(1.2, 0.5) }),
			$(go.Shape, "Rectangle",
        { alignment: new go.Spot(1.1, 0.5),
          fill: "black", width: 15, height: 2,
          visible: true },
        new go.Binding("visible", "error"))
        );
      var NandTemplate =
        $(go.Node, "Spot", nodeStyle(),{ contextMenu: window.myHTMLLightBox },
          $(go.Shape, "NandGate", shapeStyle()),
          $(go.Shape, "Rectangle", portStyleB(true),
            { portId: "in1", alignment: new go.Spot(0.05, 0.3) }),				  $(go.Shape, "Rectangle",
        { alignment: new go.Spot(-0.09, 0.7),
          fill: "black", width: 15, height: 2,
          visible: true },
        new go.Binding("visible", "error")),
          $(go.Shape, "Rectangle", portStyleB(true),
            { portId: "in2", alignment: new go.Spot(0.05, 0.7) }),$(go.Shape, "Rectangle",
        { alignment: new go.Spot(-0.09, 0.3),
          fill: "black", width: 15, height: 2,
          visible: true },
        new go.Binding("visible", "error")),
          $(go.Shape, "Rectangle", portStyleB(false),
            { portId: "out", alignment: new go.Spot(1.2, 0.5) }),
			$(go.Shape, "Rectangle",
        { alignment: new go.Spot(1.10, 0.5),
          fill: "black", width: 15, height: 2,
          visible: true },
        new go.Binding("visible", "error"))
        );
      var NOTTemplate =
        $(go.Node, "Spot", nodeStyle(),{ contextMenu: window.myHTMLLightBox },
          $(go.Shape, "Inverter", shapeStyle()),
          $(go.Shape, "Rectangle", portStyleB(true),
            { portId: "in", alignment: new go.Spot(0.04, 0.5) }),
						$(go.Shape, "Rectangle",
        { alignment: new go.Spot(-0.1, 0.5),
          fill: "black", width: 15, height: 2,
          visible: true },
        new go.Binding("visible", "error")),
          $(go.Shape, "Rectangle", portStyleB(false),
            { portId: "out", alignment: new go.Spot(1.2, 0.5) }),
			$(go.Shape, "Rectangle",
        { alignment: new go.Spot(1.1, 0.5),
          fill: "black", width: 15, height: 2,
          visible: true },
        new go.Binding("visible", "error"))
        );
      var Heat_SensorTemplate =
        $(go.Node, "Spot", nodeStyle(),{ contextMenu: window.myHTMLLightBox },
          $(go.Shape, "Circle", shapeStyle(),
            { fill: blue }),  // override the default fill (from shapeStyle()) to be red
						$(go.Picture, "./assets/hot.png",
              { width: 30, height: 45 }),
          $(go.Shape, "Rectangle", portStyleB(false),  // the only port
            { portId: "", alignment: new go.Spot(1.1, 0.5) }),
						$(go.Shape, "Rectangle",
        { alignment: new go.Spot(1.1, 0.5),
          fill: "black", width: 15, height: 2,
          visible: true },
        new go.Binding("visible", "error")),
          { // if double-clicked, an input node will change its value, represented by the color.
            doubleClick: function (e, obj) {
                e.diagram.startTransaction("Toggle Input");
                var shp = obj.findObject("NODESHAPE");
                shp.fill = (shp.fill === green) ? blue : green;
                updateStates();
                e.diagram.commitTransaction("Toggle Input");
              }
          }
		  );
		  
		var ConnectorTemplate =
            $(go.Node, "Auto", nodeStyle(),
        $(go.Shape, "Rectangle",
          { fill: "lightyellow", stroke: null }),
        $(go.TextBlock,
          {
            margin: 5,
            maxSize: new go.Size(200, NaN),
            wrap: go.TextBlock.WrapFit,
            textAlign: "center",
            editable: true,
            font: "bold 12pt Helvetica, Arial, sans-serif",
            stroke: '#454545'
          },
          new go.Binding("text").makeTwoWay())
        // no ports, because no links are allowed to connect with a comment
        );
      var BatteryTemplate =
		$(go.Node, "Spot", nodeStyle(),{ contextMenu: window.myHTMLLightBox },
						$(go.Picture, "./assets/plus.png",
              { width: 50, height: 75 }),
		  $(go.Shape, "Rectangle", portStyleC(false),  // the only port
            { portId: "out1", alignment: new go.Spot(0.4, 0.5),fromLinkable: true, toLinkable: false, })
        );
        
        var BattTemplate =
            $(go.Node, "Spot", nodeStyle(),{ contextMenu: window.myHTMLLightBox },
						$(go.Picture, "./assets/minus.png",
              { width: 50, height: 75 }),
		  $(go.Shape, "Rectangle", portStyleB(false),  // the only port
            { portId: "out1", alignment: new go.Spot(0.8, 0.5),fromLinkable: true, toLinkable: false, })
        );
        
        		      var TruthTemplate =
 $(go.Node, "Vertical",
      { resizable: false,
        rotatable: false, 
        locationSpot: go.Spot.Center },
      new go.Binding("location", "loc"),
      $(go.TextBlock,
        { text: "A",
          editable: true,
          font: "bold 12pt Arial, Helvetica, sans-serif",
         areaBackground: "white",
          scale: 2,
          // this specific TextBlock uses a RadioButtons for editing text
          textEditor: window.TextEditorRadioButtons, // defined in textEditorRadioButtons.js
          // this specific TextBlock has its own choices:
          choices: ['A','B','Slide Switch', 'Light Sensor', 'Temp Sensor', 'Push Switch','Y','Z',]
        }),
                              
      $(go.TextBlock,
        { text: "?",
          editable: true,
          font: "bold 12pt Arial, Helvetica, sans-serif",
          areaBackground: "white",
          scale: 2,
          // this specific TextBlock uses a RadioButtons for editing text
          textEditor: window.TextEditorRadioButtons, // defined in textEditorRadioButtons.js
          // this specific TextBlock has its own choices:
          choices: ['0', '1']
        }),
      $(go.TextBlock,
        { text: "?",
          editable: true,
          font: "bold 12pt Arial, Helvetica, sans-serif",
          areaBackground: "white",
          scale: 2,
          // this specific TextBlock uses a RadioButtons for editing text
          textEditor: window.TextEditorRadioButtons, // defined in textEditorRadioButtons.js
          // this specific TextBlock has its own choices:
          choices: ['0', '1']
        }),
      $(go.TextBlock,
        { text: "?",
          editable: true,
          font: "bold 12pt Arial, Helvetica, sans-serif",
          areaBackground: "white",
          scale: 2,
          // this specific TextBlock uses a RadioButtons for editing text
          textEditor: window.TextEditorRadioButtons, // defined in textEditorRadioButtons.js
          // this specific TextBlock has its own choices:
          choices: ['0', '1']
        }),
      $(go.TextBlock,
        { text: "?",
          editable: true,
          font: "bold 12pt Arial, Helvetica, sans-serif",
          areaBackground: "white",
          scale: 2,
          // this specific TextBlock uses a RadioButtons for editing text
          textEditor: window.TextEditorRadioButtons, // defined in textEditorRadioButtons.js
          // this specific TextBlock has its own choices:
          choices: ['0', '1']
        }) // override the default fill (from shapeStyle()) to be green
        );
			
        
		      var MotorTemplate =
        $(go.Node, "Spot", nodeStyle(),{ contextMenu: window.myHTMLLightBox },
          $(go.Shape, "Circle", shapeStyle(),
            { fill: red }),  // override the default fill (from shapeStyle()) to be green
						$(go.Picture, MotorOff,
              { width: 50, height: 50 }),
 $(go.Shape, "Rectangle", portStyleB(true),
            { portId: "in1", alignment: new go.Spot(0.1, 0.3) })
        ,
		$(go.Shape, "Rectangle",
        { alignment: new go.Spot(-0.06, 0.3),
          fill: "black", width: 15, height: 2,
          visible: true },
        new go.Binding("visible", "error")),
          $(go.Shape, "Rectangle", portStyleB(true),
            { portId: "in2", alignment: new go.Spot(0.1, 0.7) })
        ,
		$(go.Shape, "Rectangle",
        { alignment: new go.Spot(-0.06, 0.7),
          fill: "black", width: 15, height: 2,
          visible: true },
        new go.Binding("visible", "error"))
        );
						  
		        var Light_SensorTemplate =
        $(go.Node, "Spot", nodeStyle(),{ contextMenu: window.myHTMLLightBox },
          $(go.Shape, "Clock", shapeStyle(),
            { fill: red }),  // override the default fill (from shapeStyle()) to be red
          $(go.Shape, "Rectangle", portStyleB(false),  // the only port
            { portId: "", alignment: new go.Spot(1.1, 0.5) }),
						$(go.Shape, "Rectangle",
        { alignment: new go.Spot(1.1, 0.5),
          fill: "black", width: 15, height: 2,
          visible: true },
        new go.Binding("visible", "error")),
          { // if double-clicked, an input node will change its value, represented by the color.
            doubleClick: function (e, obj) {
                e.diagram.startTransaction("Toggle Input");
                var shp = obj.findObject("NODESHAPE");
                shp.fill = (shp.fill === white) ? red : white;
                updateStates();
                e.diagram.commitTransaction("Toggle Input");
                
                
              }
          }
        );
      // add the templates created above to myDiagram and palette
      myDiagram.nodeTemplateMap.add("Switch", SwitchTemplate);
	  	        myDiagram.nodeTemplateMap.add("Heat_Sensor", Heat_SensorTemplate);
				myDiagram.nodeTemplateMap.add("Slide_Switch", SSwitchTemplate);
	        myDiagram.nodeTemplateMap.add("Light_Sensor", Light_SensorTemplate);
      myDiagram.nodeTemplateMap.add("NOT gate", NOTTemplate);
      myDiagram.nodeTemplateMap.add("AND gate", AndTemplate);
      myDiagram.nodeTemplateMap.add("OR gate", orTemplate);
      myDiagram.nodeTemplateMap.add("NAND gate", NandTemplate);
      myDiagram.nodeTemplateMap.add("NOR gate", norTemplate);
			myDiagram.nodeTemplateMap.add("XNOR gate", xnorTemplate);
			myDiagram.nodeTemplateMap.add("XOR gate", xorTemplate);
			myDiagram.nodeTemplateMap.add("Buzzer", buzzerTemplate);
			myDiagram.nodeTemplateMap.add("Relay", relayTemplate);
			myDiagram.nodeTemplateMap.add("Lamp", LampTemplate);
						myDiagram.nodeTemplateMap.add("Label", ConnectorTemplate);
						myDiagram.nodeTemplateMap.add("Battery", BatteryTemplate);
        myDiagram.nodeTemplateMap.add("Batt", BattTemplate);
						myDiagram.nodeTemplateMap.add("Motor", MotorTemplate);
						//myDiagram.nodeTemplateMap.add("Blank", BlankTemplate);
        myDiagram.nodeTemplateMap.add("Truth", TruthTemplate);
      // share the template map with the Palette
      palette.nodeTemplateMap = myDiagram.nodeTemplateMap;
      palette.model.nodeDataArray = [
	//	{ category: "Blank" },
		{ category: "Light_Sensor" },{ category: "Lamp" },{ category: "Heat_Sensor"},
				{category: "Switch"},
        { category: "NOT gate" },
        { category: "AND gate" },
        { category: "OR gate" },		
		{ category: "Buzzer" },
		{ category: "Relay" },{category: "Slide_Switch" },
		{ category: "Motor" },{ category: "NAND gate" },{ category: "NOR gate" },{ category: "XOR gate" },{ category: "XNOR gate" },{ category: "Label",text: "Label Here" },{ category: "Battery" },{ category: "Batt" },{ category: "Truth" },
      ];
 
      // load the initial diagram
      load();
      // continually update the diagram
      loop();
    }
    // update the diagram every 250 milliseconds
    function loop() {
      setTimeout(function() { updateStates(); loop(); }, 250);
    }
    // update the value and appearance of each node according to its type and input values
    function updateStates() {
      var oldskip = myDiagram.skipsUndoManager;
      myDiagram.skipsUndoManager = true;
      // do all "input" nodes first
      myDiagram.nodes.each(function(node) {
          if (node.category === "Switch") {
            doInput(node);
          }
		            if (node.category === "Slide_Switch") {
            doInput(node);
          }
		            if (node.category === "Heat_Sensor") {
            doInputHS(node);
          }
		  		    if (node.category === "Light_Sensor") {
            doInputLS(node);
          }
        });
      // now we can do all other kinds of nodes
      myDiagram.nodes.each(function(node) {
          switch (node.category) {
            case "AND gate":       doAnd(node); break;
            case "OR gate":         doOr(node); break;
            case "XNOR gate":       doXor(node); break;
            case "NOT gate":       doNot(node); break;
            case "NAND gate":     doNand(node); break;
            case "NOR gate":       doNor(node); break;
            case "XOR gate":     doXnor(node); break;
            			case "Buzzer": doOutput(node); break;
			            case "Relay": doRelay(node); break;
            case "Lamp": doOutputL(node); break;
            case "Heat_Sensor": break;
			case "Light_Sensor": break;
			case "Switch": break;
						case "Slide_Switch": break;
						//case "Connector":	doConnector(node); break;
						case "Battery":	doBattery1(node); break;
                  case "Batt":	doBatt(node); break;
						case "Motor":	doMotor(node); break; 
                  case "Truth": break;// doInput already called, above
          }
        });
      myDiagram.skipsUndoManager = oldskip;
    }

    // helper predicate
    function linkIsTrue(link) {  // assume the given Link has a Shape named "SHAPE"
      return link.findObject("SHAPE").stroke == green;
    }
    // helper function for propagating results
    function setOutputLinks(node, color) {
      node.findLinksOutOf().each(function(link) { link.findObject("SHAPE").stroke = color; });
    }
    // update nodes by the specific function for its type
    // determine the color of links coming out of this node based on those coming in and node type
 function doInput(node) {
      // the output is just the node's Shape.fill
      setOutputLinks(node, node.findObject("NODESHAPE").fill);
    }
	 function doInputHS(node) {
     var color1 = node.findObject("NODESHAPE").fill;
	       var colour = color1 === blue ? red : green;
      setOutputLinks(node, colour);
    }
     function doInputLS(node) {
     var color1 = node.findObject("NODESHAPE").fill;
	       var colour = color1 === white ? green : red;
      setOutputLinks(node, colour);
    }
    function doAnd(node) {
      var truecount = 0;
      node.findLinksInto().each(function(link) { if (linkIsTrue(link)) truecount++; });
      var color = truecount === 2 ? green : red;
      setOutputLinks(node, color);
    }
	
    function doNand(node) {
      var color = !node.findLinksInto().all(linkIsTrue) ? green : red;
      setOutputLinks(node, color);
	}
	
    function doNot(node) {
      var color = !node.findLinksInto().all(linkIsTrue) ? green : red;
      setOutputLinks(node, color);
    }
	    function doBattery1(node) {
      setOutputLinks(node, green);
    }
    	    function doBatt(node) {
      setOutputLinks(node, "black");
    }
    function doConnector(node) {
      var truecount = 0;
      node.findLinksInto().each(function(link) { if (linkIsTrue(link)) truecount++; });
      var color = truecount === 1 ? green : red;
      setOutputLinks(node, color);
    }
    
    function doOr(node) {
      var color = node.findLinksInto().any(linkIsTrue) ? green : red;
      setOutputLinks(node, color);
    }
    function doNor(node) {
      var color = !node.findLinksInto().any(linkIsTrue) ? green : red;
      setOutputLinks(node, color);
    }
    function doXor(node) {
      var truecount = 0;
      node.findLinksInto().each(function(link) { if (linkIsTrue(link)) truecount++; });
      var color = truecount % 2 === 0 ? green : red;
      setOutputLinks(node, color);
    }
    function doXnor(node) {
      var truecount = 0;
      node.findLinksInto().each(function(link) { if (linkIsTrue(link)) truecount++; });
      var color = truecount % 2 !== 0 ? green : red;
      setOutputLinks(node, color);
    }
   
	function doOutput(node) {
      // assume there is just one input link
      // we just need to update the node's Shape.fill
      node.linksConnected.each(function(link) { node.findObject("NODESHAPE").fill = link.findObject("SHAPE").stroke; 
	  });
	  
	  	  var color = node.findLinksInto().any(linkIsTrue) ? green : red; 
      setOutputLinks(node, color);
	  node.findObject("NODESHAPE").fill = color
    }
		function doOutputL(node) {
      // assume there is just one input link
	       var color1 = node.findLinksInto().any(linkIsTrue) ? green : red;
	       var colour = color1 === green ? yellow : red;
      // we just need to update the node's Shape.fill
      node.linksConnected.each(function(link) { node.findObject("NODESHAPE").fill = colour; 
	  });
	   
      setOutputLinks(node, colour);
	  node.findObject("NODESHAPE").fill = colour
    }
	
	
	     function doInputLS(node) {
     var color1 = node.findObject("NODESHAPE").fill;
	       var colour = color1 === white ? green : red;
      setOutputLinks(node, colour);
    }
	
	
		function doRelay(node) {
      // assume there is just one input link
      // we just need to update the node's Shape.fill
      node.linksConnected.each(function(link) { node.findObject("NODESHAPE").fill = link.findObject("SHAPE").stroke; 
	  });      
	  var color = node.findLinksInto("in1").all(linkIsTrue) ? green : red;
     node.findObject("NODESHAPE").fill = color;
	       var truecount = 0;
      node.findLinksInto().each(function(link) { if (linkIsTrue(link)) truecount++; });
      var color = truecount === 2 ? green : red;
	   setOutputLinks(node, color);
            	       var truecount = 0;
      node.findLinksInto("in1").each(function(link) { if (linkIsTrue(link)) truecount++; });
      var color = truecount === 0? red : green;
node.findObject("NODESHAPE").fill = color;
    }
						function doMotor(node) {
      // assume there is just one input link
      // we just need to update the node's Shape.fill
if (node.linksConnected.count !== 2) {
          var colour2 = node.findLinksInto().each(linkIsTrue) ? red : green}
           else if (node.linksConnected.count === 2) {
          var truecount = 0;
      node.findLinksInto().each(function(link) { if (linkIsTrue(link)) truecount++; });
      var colour2 = truecount % 2 === 0 ? red : green};
     node.findObject("NODESHAPE").fill = colour2;
	   

  }
     
      
    // save a model to and load a model from JSON text, displayed below the Diagram
    function save() {
      document.getElementById("mySavedModel").value = myDiagram.model.toJson();
      myDiagram.isModified = false;
    }
    function load() {
      myDiagram.model = go.Model.fromJson(document.getElementById("mySavedModel").value);
    };
	
  </script>
<style type="text/css">
.textgreen {
	color: #008000;
}
.textred {
	color: #F00;
}
</style>
</head>
<body onload="init()">
<div id="sample">
  <div style="width:100%; white-space:nowrap;">
    <span style="display: inline-block; vertical-align: top; width:285px">
      <div id="palette" style="border: solid 1px black; height: 965px"></div>
    </span>
    <span style="display: inline-block; vertical-align: top; width: 85%">
      <div id="myDiagramDiv" style="border: solid 1px black; height: 965px"></div>
    </span>
  </div>
  <p>&nbsp;</p>
<!-- <div> <button id="blobButton">Make Blob and Download</button>
    <div> -->
      
    </div>
    <textarea id="mySavedModel" style="width:100%;height:0px">

{ "class": "go.GraphLinksModel",
  "linkFromPortIdProperty": "fromPort",
  "linkToPortIdProperty": "toPort",
  "nodeDataArray": [
{"category":"Slide_Switch", "key":"Slide_Switch1", "loc":"-280 -250" },
{"category":"Light_Sensor", "key":"Light_Sensor1", "loc":"-300 -120" },
{"category":"Heat_Sensor", "key":"Heat_Sensor1", "loc":"-320 -20" },
{"category":"Switch", "key":"Switch1", "loc":"-280 80" },

        {"category":"Label", "loc":"-385 -210", "text":"Slide Switch"},
        {"category":"Label", "loc":"-410 -100", "text":"Light Sensor"},
        {"category":"Label", "loc":"-425 0", "text":"Heat Sensor"},
        {"category":"Label", "loc":"-385 100", "text":"Push Switch"},
        
{"category":"NOT gate", "key":"NOT1", "loc":"-45 -230" },
{"category":"AND gate", "key":"AND1", "loc":"-45 -90" },
{"category":"OR gate", "key":"OR1", "loc":"-40 60" },

{"category":"Buzzer", "key":"Buzzer1", "loc":"220 -235" },
{"category":"Relay", "key":"Relay1", "loc":"220 -80" },
{"category":"Lamp", "key":"Lamp1", "loc":"220 80" },
        
                {"category":"Label", "loc":"230 -265", "text":"Buzzer"},
        {"category":"Label", "loc":"235 -108", "text":"Relay"},
        {"category":"Label", "loc":"235 52", "text":"Lamp"}
 ],
 "linkDataArray": [
{"from":"Light_Sens0", "fromPort":"out0", "to":"NOT01", "toPort":"in"},
{"from":"NO0", "fromPort":"out0", "to":"Lamp01", "toPort":"in"}

 ]}
 
    </textarea>
  </div>

</div>
</body>
</html>